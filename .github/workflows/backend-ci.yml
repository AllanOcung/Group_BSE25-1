name: Backend CI Pipeline
on:
  push:
    branches: [main, develop]
    paths:
      - "backend/**"
      - ".github/workflows/backend-ci.yml"
  pull_request:
    branches: [main, develop]
    paths:
      - "backend/**"

jobs:
  backend-tests:
    name: Backend Tests & Quality Checks
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.11]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev

      - name: Install Python dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create .env file for testing
        run: |
          cd backend
          # generate a secure random SECRET_KEY (Django utility)
          SECRET=$(python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())")
          cat > .env << EOF
          DEBUG=True
          SECRET_KEY=${SECRET}
          DATABASE_URL=postgres://postgres:postgres@localhost:5432/test_db
          ALLOWED_HOSTS=localhost,127.0.0.1
          CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
          # Prevent --deploy warnings in CI
          SECURE_HSTS_PRELOAD=True
          EOF

      - name: Create production-like .env
        run: |
          cd backend
          SECRET=$(python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())")
          cat > .env << EOF
          DEBUG=False
          SECRET_KEY=${SECRET}
          DATABASE_URL=sqlite:///db.sqlite3
          ALLOWED_HOSTS=localhost,127.0.0.1
          CORS_ALLOWED_ORIGINS=http://localhost:3000
          SECURE_HSTS_PRELOAD=True
          EOF

      - name: Run Django system check
        run: |
          cd backend
          # Only fail on actual errors, not warnings
          python manage.py check --fail-level=ERROR

      - name: Code formatting check (Black)
        run: |
          cd backend
          black --check --diff .

      - name: Import sorting check (isort)
        run: |
          cd backend
          isort --check-only --diff .

      - name: Linting (Flake8)
        run: |
          cd backend
          flake8 .

      - name: Type checking (mypy)
        run: |
          cd backend
          mypy . --ignore-missing-imports
        continue-on-error: true

      - name: Security check (Bandit)
        run: |
          cd backend
          bandit -r . -f json -o bandit-report.json -x "*/tests/*,*/migrations/*,*/venv/*,*/env/*"
        continue-on-error: true

      - name: Run Django migrations
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        run: |
          cd backend
          python manage.py migrate --noinput

      - name: Collect static files
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        run: |
          cd backend
          python manage.py collectstatic --noinput

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        run: |
          cd backend
          coverage run --source='.' manage.py test
          coverage xml
          coverage html
          coverage report

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: |
            backend/htmlcov/
            backend/coverage.xml
            backend/bandit-report.json

  build-and-validate:
    name: Build & Validate Django App
    runs-on: ubuntu-latest
    needs: backend-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create production-like .env
        run: |
          cd backend
          cat > .env << EOF
          DEBUG=False
          SECRET_KEY=production-secret-key-placeholder
          DATABASE_URL=sqlite:///db.sqlite3
          ALLOWED_HOSTS=localhost,127.0.0.1
          CORS_ALLOWED_ORIGINS=http://localhost:3000
          EOF

      - name: Validate Django deployment settings
        run: |
          cd backend
          python manage.py check --deploy --fail-level=WARNING

      - name: Test database migrations
        run: |
          cd backend
          python manage.py makemigrations --check --dry-run
          python manage.py migrate --noinput

      - name: Create superuser (for deployment validation)
        run: |
          cd backend
          echo "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_superuser('admin', 'admin@example.com', 'admin123') if not User.objects.filter(username='admin').exists() else None" | python manage.py shell

      - name: Test server startup
        run: |
          cd backend
          timeout 10s python manage.py runserver 8000 &
          sleep 5
          curl -f http://localhost:8000/admin/ || exit 1
