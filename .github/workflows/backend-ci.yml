name: Backend CI Pipeline
on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - ".github/workflows/backend-ci.yml"
  pull_request:
    branches: [main]
    paths:
      - "backend/**"

jobs:
  backend-tests:
    name: Backend Tests & Quality Checks
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.11]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Install additional CI/CD tools
          pip install pbr
          pip install black isort flake8 mypy bandit coverage

      - name: Create .env file for testing
        run: |
          cd backend
          # Generate a secure random SECRET_KEY using Django utility
          SECRET=$(python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())")
          cat > .env << EOF
          DEBUG=True
          SECRET_KEY=${SECRET}
          # Use SQLite for testing (default Django behavior)
          ALLOWED_HOSTS=localhost,127.0.0.1
          CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
          # Use in-memory SQLite for faster tests
          DATABASE_URL=sqlite:///:memory:
          EOF

      - name: Reset database and run migrations
        run: |
          cd backend
          # Remove any existing database
          rm -f db.sqlite3
          # Create fresh migrations (in case of issues)
          python manage.py makemigrations users
          # Run migrations in the correct order
          python manage.py migrate


      - name: Run Django system check
        run: |
          cd backend
          # Only fail on actual errors, not on warning
          python manage.py check --fail-level=ERROR

      - name: Code formatting check (Black)
        run: |
          cd backend
          black --check --diff .

      - name: Import sorting check (isort)
        run: |
          cd backend
          isort --check-only --diff .

      - name: Linting (Flake8)
        run: |
          cd backend
          flake8 .

      - name: Type checking (mypy)
        run: |
          cd backend
          mypy . --ignore-missing-imports
        continue-on-error: true

      - name: Security check (Bandit)
        run: |
          cd backend
          bandit -r . -f json -o bandit-report.json -x "*/tests/*,*/migrations/*,*/venv/*,*/env/*"
          # Also generate a readable report
          bandit -r . -f txt -o bandit-report.txt || true
        continue-on-error: true

      - name: Run tests with coverage
        run: |
          cd backend
          coverage run --source='.' manage.py test
          coverage xml
          coverage html
          coverage report

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false
      