name: Backend CI/CD Pipeline
on:
  push:
    branches: [main, develop]
    paths:
      - "backend/**"
      - ".github/workflows/backend-ci.yml"
  pull_request:
    branches: [main]
    paths:
      - "backend/**"

jobs:
  build:
    name: Build & Setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pbr black isort flake8 mypy bandit coverage

      - name: Create .env file
        run: |
          cd backend
          SECRET=$(python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())")
          cat > .env << EOF
          DEBUG=True
          SECRET_KEY=${SECRET}
          ALLOWED_HOSTS=localhost,127.0.0.1
          CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
          DATABASE_URL=sqlite:///:memory:
          EOF

      - name: Database migrations
        run: |
          cd backend
          rm -f db.sqlite3
          python manage.py makemigrations users
          python manage.py migrate

      - name: Django system check
        run: |
          cd backend
          python manage.py check --fail-level=ERROR

      - name: Collect static files (if needed)
        run: |
          cd backend
          python manage.py collectstatic --noinput --dry-run
        continue-on-error: true

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: [build]  # Run after build succeeds
    strategy:
      matrix:
        python-version: [3.11]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install code quality tools
        run: |
          pip install black isort flake8 mypy bandit

      - name: Code formatting check (Black)
        run: |
          cd backend
          black --check --diff .

      - name: Import sorting check (isort)
        run: |
          cd backend
          isort --check-only --diff .

      - name: Linting (Flake8)
        run: |
          cd backend
          flake8 .

      - name: Type checking (mypy)
        run: |
          cd backend
          mypy . --ignore-missing-imports
        continue-on-error: true

      - name: Security check (Bandit)
        run: |
          cd backend
          bandit -r . -f json -o bandit-report.json -x "*/tests/*,*/migrations/*,*/venv/*,*/env/*"
          bandit -r . -f txt -o bandit-report.txt || true
        continue-on-error: true

  tests:
    name: Tests & Coverage
    runs-on: ubuntu-latest
    needs: [build]  # Run after build succeedsss
    strategy:
      matrix:
        python-version: [3.11]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage

      - name: Create .env file for testing
        run: |
          cd backend
          SECRET=$(python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())")
          cat > .env << EOF
          DEBUG=True
          SECRET_KEY=${SECRET}
          ALLOWED_HOSTS=localhost,127.0.0.1
          CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
          DATABASE_URL=sqlite:///:memory:
          EOF

      - name: Setup database
        run: |
          cd backend
          rm -f db.sqlite3
          python manage.py makemigrations users
          python manage.py migrate

      - name: Run tests with coverage
        run: |
          cd backend
          coverage run --source='.' manage.py test
          coverage xml
          coverage html
          coverage report

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  deploy_staging:
    name: Deploy to Render Staging
    runs-on: ubuntu-latest
    needs: [tests, code-quality]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Trigger Render Deploy Hook
        run: |
          echo "Triggering Render deployment..."
          curl -X POST ${{ secrets.RENDER_DEPLOY_URL }}
          echo "Staging deployment triggered successfully!"

      - name: Wait for deployment
        run: sleep 60
  deploy-production:
    name: Deploy to Render Production
    runs-on: ubuntu-latest
    needs: [tests, code-quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Trigger Render Production Deploy Hook
        run: |
          echo "Triggering Render production deployment..."
          curl -X POST ${{ secrets.RENDER_DEPLOY_PRO_URL }}
          echo "Production deployment triggered successfully!"

      - name: Wait for deployment
        run: sleep 60
      
